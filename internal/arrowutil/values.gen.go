// Generated by tmpl
// https://github.com/benbjohnson/tmpl
//
// DO NOT EDIT!
// Source: values.gen.go.tmpl

package arrowutil

import (
	"fmt"

	"github.com/apache/arrow/go/arrow/array"
)

type Values interface {
	Value(i int) interface{}
	IsNull(i int) bool
}

func AsValues(arr array.Interface) Values {
	switch arr := arr.(type) {

	case *array.Int64:
		return (*Int64Values)(arr)

	case *array.Uint64:
		return (*Uint64Values)(arr)

	case *array.Float64:
		return (*Float64Values)(arr)

	case *array.Boolean:
		return (*BooleanValues)(arr)

	case *array.Binary:
		return (*StringValues)(arr)

	default:
		panic(fmt.Errorf("unsupported array data type: %s", arr.DataType()))
	}
}

type Int64Values array.Int64

func (vs *Int64Values) Value(i int) interface{} {
	return (*array.Int64)(vs).Value(i)
}

func (vs *Int64Values) IsNull(i int) bool {
	return (*array.Int64)(vs).IsNull(i)
}

type Uint64Values array.Uint64

func (vs *Uint64Values) Value(i int) interface{} {
	return (*array.Uint64)(vs).Value(i)
}

func (vs *Uint64Values) IsNull(i int) bool {
	return (*array.Uint64)(vs).IsNull(i)
}

type Float64Values array.Float64

func (vs *Float64Values) Value(i int) interface{} {
	return (*array.Float64)(vs).Value(i)
}

func (vs *Float64Values) IsNull(i int) bool {
	return (*array.Float64)(vs).IsNull(i)
}

type BooleanValues array.Boolean

func (vs *BooleanValues) Value(i int) interface{} {
	return (*array.Boolean)(vs).Value(i)
}

func (vs *BooleanValues) IsNull(i int) bool {
	return (*array.Boolean)(vs).IsNull(i)
}

type StringValues array.Binary

func (vs *StringValues) Value(i int) interface{} {
	return (*array.Binary)(vs).ValueString(i)
}

func (vs *StringValues) IsNull(i int) bool {
	return (*array.Binary)(vs).IsNull(i)
}
